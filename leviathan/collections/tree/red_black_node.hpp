#pragma once

#include "tree_node_operation.hpp"

#include <algorithm>

namespace cpp::collections
{

struct red_black_node : binary_node_operation
{
    // Different from standard red black tree, we add another color sentinel, 
    // for each node except header, the color is red or black. And in this way, 
    // the iterator can be a circle. Since compiler will fill some bytes for 
    // struct, it will always occupy sizeof(red_black_node*) bytes. 
    enum class color { red, black, sentinel };

    red_black_node* m_link[3];

    color m_color;

    std::string to_string() const
    {
        switch (m_color)
        {
            case color::red: return "R";
            case color::black: return "B";
            default: return "S";
        }
    }

    void init()
    {
        m_color = color::red;
    }

    void as_empty_tree_header()
    {
        m_color = color::sentinel;
    }

    void clone(const red_black_node* x)
    {
        m_color = x->m_color;
    }

    bool is_header() const
    {
        return m_color == color::sentinel;
    }

    // Write insert_and_rebalance with red black tree fixup
    void insert_and_rebalance(bool insert_left, red_black_node* p, red_black_node& header)
    {
        this->insert_node_and_update_header(insert_left, p, header);

        auto& root = header.parent();
        auto x = this;

        // Rebalance
        while (x != root && x->parent()->m_color == color::red)
        {
            auto grand = x->parent()->parent();

            // The x's parent is left child
            if (x->parent() == grand->lchild())
            {
                auto uncle = grand->rchild();

                if (uncle && uncle->m_color == color::red)
                {
                    x->parent()->m_color = color::black;
                    uncle->m_color = color::black;
                    x->parent()->parent()->m_color = color::red;
                    x = x->parent()->parent();
                }
                else
                {
                    if (x == x->parent()->rchild())
                    {
                        x = x->parent();
                        x->rotate_left(root);
                    }

                    x->parent()->m_color = color::black;
                    x->parent()->parent()->m_color = color::red;
                    x->parent()->parent()->rotate_right(root);
                }
            }
            else
            {
                auto uncle = grand->lchild();

                if (uncle && uncle->m_color == color::red)
                {
                    x->parent()->m_color = color::black;
                    uncle->m_color = color::black;
                    x->parent()->parent()->m_color = color::red;
                    x = x->parent()->parent();
                }
                else
                {
                    if (x == x->parent()->lchild())
                    {
                        x = x->parent();
                        x->rotate_right(root);
                    }

                    x->parent()->m_color = color::black;
                    x->parent()->parent()->m_color = color::red;
                    x->parent()->parent()->rotate_left(root);
                }
            }
        }

        // maintain the root color
        root->m_color = color::black;
        header.m_color = color::sentinel;
    }

    // Write rebalance_for_erase with red black tree fixup
    red_black_node* rebalance_for_erase(red_black_node& header)
    {
        auto [successor, child, child_parent] = this->replace_node_with_successor(header);

        if (successor != this)
        {
            std::swap(m_color, successor->m_color);
        }

        // Rebalance, the code is generated by Copilot
        if (m_color == color::black)
        {
            while (child != header.parent() && (child == nullptr || child->m_color == color::black))
            {
                if (child == child_parent->lchild())
                {
                    auto sibling = child_parent->rchild();

                    if (sibling->m_color == color::red)
                    {
                        sibling->m_color = color::black;
                        child_parent->m_color = color::red;
                        child_parent->rotate_left(header.parent());
                        sibling = child_parent->rchild();
                    }

                    if ((sibling->lchild() == nullptr || sibling->lchild()->m_color == color::black) &&
                        (sibling->rchild() == nullptr || sibling->rchild()->m_color == color::black))
                    {
                        sibling->m_color = color::red;
                        child = child_parent;
                        child_parent = child_parent->parent();
                    }
                    else
                    {
                        if (sibling->rchild() == nullptr || sibling->rchild()->m_color == color::black)
                        {
                            sibling->lchild()->m_color = color::black;
                            sibling->m_color = color::red;
                            sibling->rotate_right(header.parent());
                            sibling = child_parent->rchild();
                        }

                        sibling->m_color = child_parent->m_color;
                        child_parent->m_color = color::black;
                        sibling->rchild()->m_color = color::black;
                        child_parent->rotate_left(header.parent());
                        break;
                    }
                }
                else
                {
                    auto sibling = child_parent->lchild();

                    if (sibling->m_color == color::red)
                    {
                        sibling->m_color = color::black;
                        child_parent->m_color = color::red;
                        child_parent->rotate_right(header.parent());
                        sibling = child_parent->lchild();
                    }

                    if ((sibling->rchild() == nullptr || sibling->rchild()->m_color == color::black) &&
                        (sibling->lchild() == nullptr || sibling->lchild()->m_color == color::black))
                    {
                        sibling->m_color = color::red;
                        child = child_parent;
                        child_parent = child_parent->parent();
                    }
                    else
                    {
                        if (sibling->lchild() == nullptr || sibling->lchild()->m_color == color::black)
                        {
                            sibling->rchild()->m_color = color::black;
                            sibling->m_color = color::red;
                            sibling->rotate_left(header.parent());
                            sibling = child_parent->lchild();
                        }

                        sibling->m_color = child_parent->m_color;
                        child_parent->m_color = color::black;
                        sibling->lchild()->m_color = color::black;
                        child_parent->rotate_right(header.parent());
                        break;
                    }
                }
            }

            if (child)
            {
                child->m_color = color::black;
            }
        }

        header.m_color = color::sentinel;
        return successor;
    }

};

}  // namespace cpp::collections 



